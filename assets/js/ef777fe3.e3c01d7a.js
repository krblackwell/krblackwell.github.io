"use strict";(self.webpackChunklearn_coding_fun_projects=self.webpackChunklearn_coding_fun_projects||[]).push([[1063],{7445:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"python/foundations/lists-and-strings","title":"lists-and-strings","description":"How to use lists and more string methods in Python.","source":"@site/docs/python/01-foundations/07-lists-and-strings.md","sourceDirName":"python/01-foundations","slug":"/python/foundations/lists-and-strings","permalink":"/docs/python/foundations/lists-and-strings","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"python","permalink":"/docs/tags/python"},{"inline":true,"label":"foundations","permalink":"/docs/tags/foundations"},{"inline":true,"label":"lists","permalink":"/docs/tags/lists"},{"inline":true,"label":"strings","permalink":"/docs/tags/strings"},{"inline":true,"label":"methods","permalink":"/docs/tags/methods"}],"version":"current","lastUpdatedAt":1751169600000,"sidebarPosition":7,"frontMatter":{"sidebar_label":"lists and strings","sidebar_position":7,"last_update":{"date":"6/29/25","author":"krblackwell"},"description":"How to use lists and more string methods in Python.","tags":["python","foundations","lists","strings","methods"],"draft":false,"unlisted":false},"sidebar":"pythonSidebar","previous":{"title":"documentation","permalink":"/docs/python/foundations/documentation"},"next":{"title":"lists","permalink":"/docs/python/foundations/lists"}}');var i=s(4848),l=s(8453);const a={sidebar_label:"lists and strings",sidebar_position:7,last_update:{date:"6/29/25",author:"krblackwell"},description:"How to use lists and more string methods in Python.",tags:["python","foundations","lists","strings","methods"],draft:!1,unlisted:!1},r="Lists",o={},c=[{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"What is a list?",id:"what-is-a-list",level:2},{value:"Working with lists",id:"working-with-lists",level:2},{value:"Strings can be used like lists",id:"strings-can-be-used-like-lists",level:2},{value:"String split into list of words",id:"string-split-into-list-of-words",level:2},{value:"<code>.join()</code> text together",id:"join-text-together",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("a",{href:"/lite/lab/index.html?path=python/01-foundations/07-lists-and-strings.ipynb",target:"_blank",children:(0,i.jsx)("img",{src:"https://jupyterlite.rtfd.io/en/latest/_static/badge.svg",alt:"Open in the Lab!"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/",children:"Go back to Home"})," - ",(0,i.jsx)(n.a,{href:"/docs/python/foundations/lists-and-strings",children:"Go to lesson page"})," - ",(0,i.jsx)(n.a,{href:"/docs/python/foundations",children:"Go to Foundations section"})]}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"lists",children:"Lists"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Lists"})," are a super useful ",(0,i.jsx)(n.code,{children:"data structure"})," in Python. Sometimes this same type of structure is called an ",(0,i.jsx)(n.code,{children:"array"})," in other programming languages."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Data structures"})," hold multiple pieces of data, while ",(0,i.jsx)(n.code,{children:"data type"})," describes the format of individual data pieces. A data structure might be like a picnic basket, and that picnic basket can hold multiple types of things in it, like an food, drink, utensils. Those types of things are like data types."]}),"\n",(0,i.jsx)(n.h2,{id:"learning-objectives",children:"Learning Objectives"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Learn what a list is and how to use it."}),"\n",(0,i.jsx)(n.li,{children:"Strings can be used like lists of characters."}),"\n",(0,i.jsx)(n.li,{children:"Strings can be split into lists of words."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"what-is-a-list",children:"What is a list?"}),"\n",(0,i.jsx)(n.p,{children:"Lists are collections of things. A list can have all strings, all integers, and more. A list can contain a list of lists."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"pet_string_list = ['dog', 'cat', 'bird', 'guinea pig', 'turtle']\n\npet_string_list\n"})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"['dog', 'cat', 'bird', 'guinea pig', 'turtle']"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"age_integer_list = [1, 34, 41, 55, 10]\n\nage_integer_list\n"})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"[1, 34, 41, 55, 10]"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'out_of_school_programs_list_of_lists = [\n    ["Soccer Practice", "AV Club", "Homework Help"],        # Monday\n    ["Chess Club", "Track Practice", "Art Studio"],         # Tuesday\n    ["Debate Team", "Drama Club", "Coding Workshop"],       # Wednesday\n    ["Science Club", "Basketball Practice", "Yearbook"],    # Thursday\n    ["Film Club", "School Newspaper", "Open Gym"],          # Friday\n]\n\nout_of_school_programs_list_of_lists\n'})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"[['Soccer Practice', 'AV Club', 'Homework Help'],\n['Chess Club', 'Track Practice', 'Art Studio'],\n['Debate Team', 'Drama Club', 'Coding Workshop'],\n['Science Club', 'Basketball Practice', 'Yearbook'],\n['Film Club', 'School Newspaper', 'Open Gym']]"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.p,{children:"And in Python, the next example shows you can have different types of elements in the list. There's a string, an integer, a decimal, and a boolean!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'["String", 1, 0.99, True]\n'})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"['String', 1, 0.99, True]"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.p,{children:"And a list of lists."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'shopping_cart = [\n    ["Book", 2, 19.99, True],\n    ["Headphones", 1, 39.99, False],\n    ["Pen", 3, 2.49, True]\n]\n\nshopping_cart\n'})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"[['Book', 2, 19.99, True],\n['Headphones', 1, 39.99, False],\n['Pen', 3, 2.49, True]]"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.h2,{id:"working-with-lists",children:"Working with lists"}),"\n",(0,i.jsx)(n.p,{children:"Now we get what lists can look like. Let's look at how to work with them. We'll take a list of numbers."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"list_of_numbers = [1, 10, 24, 13, 40, 8]\n\nlist_of_numbers\n"})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"[1, 10, 24, 13, 40, 8]"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.p,{children:["Python lists start with 0 as their ",(0,i.jsx)(n.code,{children:"index"}),"."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Index"}),(0,i.jsx)(n.th,{children:"0"}),(0,i.jsx)(n.th,{children:"1"}),(0,i.jsx)(n.th,{children:"2"}),(0,i.jsx)(n.th,{children:"3"}),(0,i.jsx)(n.th,{children:"4"}),(0,i.jsx)(n.th,{children:"5"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Element"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"10"}),(0,i.jsx)(n.td,{children:"24"}),(0,i.jsx)(n.td,{children:"13"}),(0,i.jsx)(n.td,{children:"40"}),(0,i.jsx)(n.td,{children:"8"})]})})]}),"\n",(0,i.jsx)(n.p,{children:"You can access each element in the list with the index."}),"\n",(0,i.jsx)(n.p,{children:"If we want to get the second element, 10, we need to ask for index 1."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"list_of_numbers[1]\n"})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"10"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.p,{children:"Now add some cells in the Lab and try that out with other index numbers! What happens if you ask it for a number that is larger than 5?"}),"\n",(0,i.jsx)(n.p,{children:"The next cell shows you a special way you can ask for the last element of a list. Use -1 as the index."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"list_of_numbers[-1]\n"})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"8"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.p,{children:"And if you keep going, you can go backwards through this list until you get to the first element again."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"list_of_numbers[-6]\n"})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"1"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.h2,{id:"strings-can-be-used-like-lists",children:"Strings can be used like lists"}),"\n",(0,i.jsx)(n.p,{children:"You can treat strings like a list of characters by using the square brackets like you did with a list of items."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'"YMCA"[0]\n'})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"'Y'"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'word = "YMCA"\n\nword[1]\n'})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"'M'"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'"YMCA"[2]\n'})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"'C'"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'"YMCA"[3]\n'})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"'A'"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'"YMCA"[-1]\n'})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"'A'"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.h2,{id:"string-split-into-list-of-words",children:"String split into list of words"}),"\n",(0,i.jsxs)(n.p,{children:["We can use the ",(0,i.jsx)(n.code,{children:".split()"})," method to turn our words into a list. By default, ",(0,i.jsx)(n.code,{children:".split()"})," separates words by whitespace. If there's at least one space, it'll use that as a separator."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'"a bunch of words".split()\n'})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"['a', 'bunch', 'of', 'words']"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.p,{children:"We can get creative with this."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'original_sentence = "We have a list: this, that, and the other thing."\n\nsplit_sentence = original_sentence.split(":")\n\nsplit_sentence\n'})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"['We have a list', ' this, that, and the other thing.']"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"split_sentence[1]\n"})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"' this, that, and the other thing.'"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"split_sentence2 = split_sentence[1].split(',')\n\nsplit_sentence2\n"})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"[' this', ' that', ' and the other thing.']"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.p,{children:"When we get to the lessons about looping, we can do a little more to process this list."}),"\n",(0,i.jsxs)(n.h2,{id:"join-text-together",children:[(0,i.jsx)(n.code,{children:".join()"})," text together"]}),"\n",(0,i.jsx)(n.p,{children:"Join is a useful method for lists. It will take the list, and join each piece by something you specify into a single string."}),"\n",(0,i.jsx)(n.p,{children:"Let's look at the pets list from earlier."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"pet_string_list = ['dog', 'cat', 'bird', 'guinea pig', 'turtle']\n\n'\u2728'.join(pet_string_list)\n"})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"'dog\u2728cat\u2728bird\u2728guinea pig\u2728turtle'"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"type('\u2728'.join(pet_string_list))\n"})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"str"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"'--'.join(pet_string_list)\n"})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"'dog--cat--bird--guinea pig--turtle'"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.p,{children:"Now let's get back to the example from our string lesson. We had some white space we couldn't easily deal with, but now we can."}),"\n",(0,i.jsxs)(n.p,{children:["First we use ",(0,i.jsx)(n.code,{children:".split()"})," to get rid of the random whitespace amounts."]}),"\n",(0,i.jsxs)(n.p,{children:["Then, we can use ",(0,i.jsx)(n.code,{children:".join()"})," to bring it back together with the appropriate amount of whitespace."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'example = "   Extra spaces at the start,  in the middle  ,  and at the end.  "\n\nexample_split = example.split()\n\nexample_split\n'})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"['Extra',\n'spaces',\n'at',\n'the',\n'start,',\n'in',\n'the',\n'middle',\n',',\n'and',\n'at',\n'the',\n'end.']"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"' '.join(example.split())\n"})}),"\n",(0,i.jsx)("div",{class:"output-cell",children:(0,i.jsx)(n.p,{children:"'Extra spaces at the start, in the middle , and at the end.'"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Now you can handle strings and lists like a pro. There is more to cover for lists,"})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(6540);const i={},l=t.createContext(i);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);