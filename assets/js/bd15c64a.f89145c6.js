"use strict";(self.webpackChunklearn_coding_fun_projects=self.webpackChunklearn_coding_fun_projects||[]).push([[1357],{8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var r=s(6540);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}},8474:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"python/foundations/lists","title":"lists","description":"How to use list methods.","source":"@site/docs/python/01-foundations/08-lists.md","sourceDirName":"python/01-foundations","slug":"/python/foundations/lists","permalink":"/docs/python/foundations/lists","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"python","permalink":"/docs/tags/python"},{"inline":true,"label":"foundations","permalink":"/docs/tags/foundations"},{"inline":true,"label":"lists","permalink":"/docs/tags/lists"}],"version":"current","lastUpdatedAt":1751169600000,"sidebarPosition":8,"frontMatter":{"sidebar_label":"lists","sidebar_position":8,"last_update":{"date":"6/29/25","author":"krblackwell"},"description":"How to use list methods.","tags":["python","foundations","lists"],"draft":false,"unlisted":false,"hide_table_of_contents":true},"sidebar":"pythonSidebar","previous":{"title":"lists and strings","permalink":"/docs/python/foundations/lists-and-strings"},"next":{"title":"dictionaries","permalink":"/docs/python/foundations/dictionaries"}}');var t=s(4848),i=s(8453);const l={sidebar_label:"lists",sidebar_position:8,last_update:{date:"6/29/25",author:"krblackwell"},description:"How to use list methods.",tags:["python","foundations","lists"],draft:!1,unlisted:!1,hide_table_of_contents:!0},o="Lists",a={},d=[{value:"Learning Objective",id:"learning-objective",level:2},{value:"<code>id()</code> function",id:"id-function",level:2},{value:"`.copy()",id:"copy",level:2},{value:"List return",id:"list-return",level:2},{value:"List methods",id:"list-methods",level:2},{value:"<code>.append()</code>",id:"append",level:3},{value:"<code>.extend()</code>",id:"extend",level:3},{value:"<code>len()</code>",id:"len",level:3},{value:"<code>.count()</code>",id:"count",level:3},{value:"<code>.sort()</code>",id:"sort",level:3},{value:"<code>.insert()</code>",id:"insert",level:3},{value:"<code>.index()</code>",id:"index",level:3},{value:"<code>.reverse()</code>",id:"reverse",level:3},{value:"<code>.remove()</code>",id:"remove",level:3},{value:"<code>.pop()</code>",id:"pop",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",del:"del",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("a",{href:"/lite/lab/index.html?path=python/01-foundations/08-lists.ipynb",target:"_blank",children:(0,t.jsx)("img",{src:"https://jupyterlite.rtfd.io/en/latest/_static/badge.svg",alt:"Open in the Lab!"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/",children:"Go back to Home"})," - ",(0,t.jsx)(n.a,{href:"/docs/python/foundations/lists-and-strings",children:"Go to lesson page"})," - ",(0,t.jsx)(n.a,{href:"/docs/python/foundations",children:"Go to Foundations section"})]}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"lists",children:"Lists"})}),"\n",(0,t.jsx)(n.p,{children:"Let's continue talking about lists. You can add to them, remove from them, and put two lists together."}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["You may see ",(0,t.jsx)(n.code,{children:"# NBVAL_IGNORE_OUTPUT"})," in a few cells for ",(0,t.jsx)(n.code,{children:"id()"}),". You can ignore that comment. It's part of the testing that these notebooks go through."]})}),"\n",(0,t.jsx)(n.h2,{id:"learning-objective",children:"Learning Objective"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"id()"})}),"\n",(0,t.jsx)(n.li,{children:"List return"}),"\n",(0,t.jsxs)(n.li,{children:["Learn list methods (and a function)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".append()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"len()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".count()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".sort()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".insert()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".index()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".reverse()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".remove()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".pop()"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"id-function",children:[(0,t.jsx)(n.code,{children:"id()"})," function"]}),"\n",(0,t.jsx)(n.p,{children:"In Python, there is something you need to know that's different about lists compared with other programming languages."}),"\n",(0,t.jsx)(n.p,{children:"A list in Python is a reference to a location in memory. When you create variables and other objects in Python, they have a location in memory. They have to go somewhere, right?"}),"\n",(0,t.jsxs)(n.p,{children:["If you create a list that's assigned a new variable name, it will point to the same location in memory. We are copying a ",(0,t.jsx)(n.code,{children:"reference"})," and it's called a ",(0,t.jsx)(n.code,{children:"shallow copy"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Let me show you."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# NBVAL_IGNORE_OUTPUT\n\noriginal_fruits_list = ['banana', 'papaya', 'strawberry', 'lychee', 'paw paw']\n\nid_original = id(original_fruits_list)\n\nid_original\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"129998931779008"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:["What we just did was create a list, and get it's location in memory. That's what ",(0,t.jsx)(n.code,{children:"id()"})," does. It gives you a unique ID that tells you its location in memory."]}),"\n",(0,t.jsx)(n.p,{children:"Next, we'll assign the list to a new name and get that ID."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# NBVAL_IGNORE_OUTPUT\n\nnew_fruits_list = original_fruits_list\n\nid_new = id(new_fruits_list)\n\nid_new\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"129998931779008"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:["So we have two lists that are the same. That number is the same as the other ID above. Let me show you they're the same with this equals ",(0,t.jsx)(n.code,{children:"=="})," comparison operator. I'm asking if the ",(0,t.jsx)(n.code,{children:"id_original"})," is the same as ",(0,t.jsx)(n.code,{children:"id_new"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"id_original == id_new\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"True"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"Is it the same? True. True means yes it's the same. This is something you have to keep in mind with lists. In some programming languages, you can create a new variable of something, and the variable is totally new."}),"\n",(0,t.jsx)(n.p,{children:"But Python does something a little different with lists! I can change the new or the old list, and both are changed."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"new_fruits_list.remove('strawberry')\n\nnew_fruits_list\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"['banana', 'papaya', 'lychee', 'paw paw']"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:".remove()"})," took out the \"strawberry\" element. It's not in new_fruits_list anymore. But look, it's gone from original_fruits_list too."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"original_fruits_list\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"['banana', 'papaya', 'lychee', 'paw paw']"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:["We didn't even do ",(0,t.jsx)(n.code,{children:'.remove("strawberry")'})," on it, and it was the same. Anything else we do to it, will happen to the other list too."]}),"\n",(0,t.jsx)(n.p,{children:"What if we create two lists that are the same?"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# NBVAL_IGNORE_OUTPUT\n\ngames_list_one = ['Poppy', 'Candy', 'Sudoku', 'Halo']\ngames_list_two = ['Poppy', 'Candy', 'Sudoku', 'Halo']\n\nprint(\n    f\"\"\"\n    {id(games_list_one)}\n    vs\n    {id(games_list_two)}\n    \"\"\"\n)\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["129998932112448",(0,t.jsx)(n.br,{}),"\n","vs",(0,t.jsx)(n.br,{}),"\n","129998932111040"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"id(games_list_one) == id(games_list_two)\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"False"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"They're different. If we do something to one, it doesn't happen to the other."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'games_list_one.pop()\ngames_list_two.append("RE")\n\nprint(\n    f"""\n    List values:\n    \'one\': {games_list_one}\n    \'two\': {games_list_two}\n    """\n)\n'})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["List values:",(0,t.jsx)(n.br,{}),"\n","'one': ['Poppy', 'Candy', 'Sudoku']",(0,t.jsx)(n.br,{}),"\n","'two': ['Poppy', 'Candy', 'Sudoku', 'Halo', 'RE']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:".pop()"})," took off the last element in the list. ",(0,t.jsx)(n.code,{children:'.append("RE")'}),' added "RE" to the end of the list. What we did to one list didn\'t happen to the other. They were created separately and not assigned to each other.']}),"\n",(0,t.jsx)(n.p,{children:"But if we assign one to the other, then they have that shared reference that means changing one changes the other. See the next cell."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# NBVAL_IGNORE_OUTPUT\n\ngames_list_one = games_list_two\n\nprint(\n    f"""\n    {id(games_list_one)}\n    vs\n    {id(games_list_two)}\n    """\n)\n'})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["129998932111040",(0,t.jsx)(n.br,{}),"\n","vs",(0,t.jsx)(n.br,{}),"\n","129998932111040"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"id(games_list_one) == id(games_list_two)\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"True"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"They're the same list."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'print(\n    f"""\n    List values:\n    \'one\': {games_list_one}\n    \'two\': {games_list_two}\n    """\n)\n'})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["List values:",(0,t.jsx)(n.br,{}),"\n","'one': ['Poppy', 'Candy', 'Sudoku', 'Halo', 'RE']",(0,t.jsx)(n.br,{}),"\n","'two': ['Poppy', 'Candy', 'Sudoku', 'Halo', 'RE']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"Now they're the same and if we do something to one, it happens to the other. I'll change games_list_two by appending to it, and check the other list, games_list_one."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'games_list_two.append("Dandy")\n\nprint(games_list_one)\n'})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"['Poppy', 'Candy', 'Sudoku', 'Halo', 'RE', 'Dandy']"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"Next, I'll change games_list_one by appending to it, and check the other list, games_list_two."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'games_list_one.append("Rainbow")\n\nprint(games_list_two)\n'})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"['Poppy', 'Candy', 'Sudoku', 'Halo', 'RE', 'Dandy', 'Rainbow']"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h2,{id:"copy",children:"`.copy()"}),"\n",(0,t.jsxs)(n.p,{children:["One last note about this for lists. There is a ",(0,t.jsx)(n.code,{children:".copy()"})," method that you can use also. The Python docs for list say that it creates a ",(0,t.jsx)(n.code,{children:"shallow copy"}),", the shared reference where the two lists are basically the same."]}),"\n",(0,t.jsxs)(n.p,{children:["However, the behavior below shows that it's creating a ",(0,t.jsx)(n.code,{children:"deep copy"}),", which means you get a new list with ",(0,t.jsx)(n.code,{children:".copy()"}),". Be cautious when copying lists. You shouldn't need to do it very often."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# NBVAL_IGNORE_OUTPUT\n\ngames_list_three = games_list_two.copy()\n\nprint(\n    f"""\n    {id(games_list_two)}\n    vs\n    {id(games_list_three)}\n    """\n)\n'})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["129998932111040",(0,t.jsx)(n.br,{}),"\n","vs",(0,t.jsx)(n.br,{}),"\n","129998932115328"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"id(games_list_two) == id(games_list_three)\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"False"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"False means they're different lists."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'print(\n    f"""\n    List values before doing anything:\n    {games_list_two}\n    {games_list_three}\n    """\n)\n'})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["List values before doing anything:",(0,t.jsx)(n.br,{}),"\n","['Poppy', 'Candy', 'Sudoku', 'Halo', 'RE', 'Dandy', 'Rainbow']",(0,t.jsx)(n.br,{}),"\n","['Poppy', 'Candy', 'Sudoku', 'Halo', 'RE', 'Dandy', 'Rainbow']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'games_list_three.pop()\n\nprint(\n    f"""\n    List values after removing the last item from "three":\n    {games_list_two}\n    {games_list_three}\n    """\n)\n'})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:['List values after removing the last item from "three":',(0,t.jsx)(n.br,{}),"\n","['Poppy', 'Candy', 'Sudoku', 'Halo', 'RE', 'Dandy', 'Rainbow']",(0,t.jsx)(n.br,{}),"\n","['Poppy', 'Candy', 'Sudoku', 'Halo', 'RE', 'Dandy']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h2,{id:"list-return",children:"List return"}),"\n",(0,t.jsxs)(n.p,{children:["This section is to point out what you might've noticed. When I used ",(0,t.jsx)(n.code,{children:".remove()"}),", ",(0,t.jsx)(n.code,{children:".pop()"}),", ",(0,t.jsx)(n.code,{children:".append()"}),", and ",(0,t.jsx)(n.code,{children:".reverse()"}),", I didn't assign it to anything, not even itself. This is like looking at the sun:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.del,{children:"list = list.remove()"})}),"\n",(0,t.jsx)(n.p,{children:"Don't look! That's not how you do it."}),"\n",(0,t.jsxs)(n.p,{children:["Lists don't return anything, so most of their methods just change the list ",(0,t.jsx)(n.code,{children:"in place"}),". The notebook cells also aren't showing the new list, since it doesn't return anything, even if we ",(0,t.jsx)(n.code,{children:"print()"}),". We have to print the list itself after we do an operation to see what happened."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"numbers_list = ['one', 'two', 'three', 'four']\n\nprint(numbers_list.append(\"five\"))\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"None"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:["Another thing is the method will change the list even if you do it inside a ",(0,t.jsx)(n.code,{children:"print()"})," statement. That doesn't always happen"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"numbers_list\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"['one', 'two', 'three', 'four', 'five']"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:['The first print above showed that the list method doesn\'t return anything. The other cell printed the list to show the new number "five" added on even though we did it within a ',(0,t.jsx)(n.code,{children:"print()"})," statement."]}),"\n",(0,t.jsx)(n.h2,{id:"list-methods",children:"List methods"}),"\n",(0,t.jsx)(n.p,{children:"For the next set of examples, I'm going to provide a list of random computer words, and we'll use these methods on it."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"computer_words = ['bus', 'RAM', 'cache', 'register', 'clock', 'binary']\n\ncomputer_words\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"['bus', 'RAM', 'cache', 'register', 'clock', 'binary']"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h3,{id:"append",children:(0,t.jsx)(n.code,{children:".append()"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:".append()"})," adds something to the end of a list."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'computer_words.append("kernel")\n\ncomputer_words\n'})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"['bus', 'RAM', 'cache', 'register', 'clock', 'binary', 'kernel']"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h3,{id:"extend",children:(0,t.jsx)(n.code,{children:".extend()"})}),"\n",(0,t.jsx)(n.p,{children:"Next, I'll make another list and I want to bring the two lists together. This is a method I use often."}),"\n",(0,t.jsx)(n.p,{children:"Note I make an empty list also. When I bring the two individual lists together, I want to give the new list a new name. The new name is meaningful and lets me know it's a different list."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words = []\n\nprogramming_words = ['binary', 'string', 'collection', 'set']\n\nprint(\n    f\"\"\"\n    {hardware_software_words}\n    {programming_words}\n    \"\"\"\n)\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["[]",(0,t.jsx)(n.br,{}),"\n","['binary', 'string', 'collection', 'set']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:".extend()"})," combines the two lists. One just happens to be empty."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.extend(programming_words)\n\nhardware_software_words\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"['binary', 'string', 'collection', 'set']"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:".extend()"})," combines the two populated lists. You see the items/elements are all in the one list."]}),"\n",(0,t.jsx)(n.p,{children:"We had to add the lists in one at a time. We can't add them at the same time."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.extend(computer_words)\n\nhardware_software_words\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["['binary',",(0,t.jsx)(n.br,{}),"\n","'string',",(0,t.jsx)(n.br,{}),"\n","'collection',",(0,t.jsx)(n.br,{}),"\n","'set',",(0,t.jsx)(n.br,{}),"\n","'bus',",(0,t.jsx)(n.br,{}),"\n","'RAM',",(0,t.jsx)(n.br,{}),"\n","'cache',",(0,t.jsx)(n.br,{}),"\n","'register',",(0,t.jsx)(n.br,{}),"\n","'clock',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'kernel']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"Now we have a list of all the words together, and our new list name is still descriptive for what's in it."}),"\n",(0,t.jsx)(n.p,{children:"The three lists we just dealt with are separate in memory. They do not have a shared reference. When we do something to one list, it's only done to that one list."}),"\n",(0,t.jsx)(n.h3,{id:"len",children:(0,t.jsx)(n.code,{children:"len()"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"len()"})," function isn't specific to list, you can use this on many things. This will tell you how long your list is. It doesn't change the list, and it returns a number."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"len(hardware_software_words)\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"11"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"If you want to know the last index in the list, you can subtract 1 from this."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"idx = len(hardware_software_words) - 1\n\nidx\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"10"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words[idx]\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"'kernel'"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h3,{id:"count",children:(0,t.jsx)(n.code,{children:".count()"})}),"\n",(0,t.jsx)(n.p,{children:"This will tell us how many times an item appears in a list."}),"\n",(0,t.jsx)(n.p,{children:"This doesn't change our list. It just tells us how many items are in it. It returns a number."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.count('binary')\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"2"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"I'll add 'binary' to the list again and see how many times it appears in the list."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.append('binary')\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.count('binary')\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"3"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h3,{id:"sort",children:(0,t.jsx)(n.code,{children:".sort()"})}),"\n",(0,t.jsx)(n.p,{children:"Let's sort our list in alphabetical order. If we had numbers, they would be sorted in numerical order."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.sort()\n\nhardware_software_words\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["['RAM',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'bus',",(0,t.jsx)(n.br,{}),"\n","'cache',",(0,t.jsx)(n.br,{}),"\n","'clock',",(0,t.jsx)(n.br,{}),"\n","'collection',",(0,t.jsx)(n.br,{}),"\n","'kernel',",(0,t.jsx)(n.br,{}),"\n","'register',",(0,t.jsx)(n.br,{}),"\n","'set',",(0,t.jsx)(n.br,{}),"\n","'string']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"Wait, what? 'RAM' is first! Python's default behavior (some languages are like this) is to sort capitalized letters first."}),"\n",(0,t.jsxs)(n.p,{children:["There's an option in ",(0,t.jsx)(n.code,{children:".sort()"})," that will fix this."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.sort(key=str.lower)\n\nhardware_software_words\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["['binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'bus',",(0,t.jsx)(n.br,{}),"\n","'cache',",(0,t.jsx)(n.br,{}),"\n","'clock',",(0,t.jsx)(n.br,{}),"\n","'collection',",(0,t.jsx)(n.br,{}),"\n","'kernel',",(0,t.jsx)(n.br,{}),"\n","'RAM',",(0,t.jsx)(n.br,{}),"\n","'register',",(0,t.jsx)(n.br,{}),"\n","'set',",(0,t.jsx)(n.br,{}),"\n","'string']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"Let's do something crazy with that. Let's make our key the number of letters in each word."}),"\n",(0,t.jsxs)(n.p,{children:["You don't do key=len(str), you just put in ",(0,t.jsx)(n.code,{children:"len"})," the name of the function without the parens ",(0,t.jsx)(n.code,{children:"()"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.sort(key=len)\n\nhardware_software_words\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["['bus',",(0,t.jsx)(n.br,{}),"\n","'RAM',",(0,t.jsx)(n.br,{}),"\n","'set',",(0,t.jsx)(n.br,{}),"\n","'cache',",(0,t.jsx)(n.br,{}),"\n","'clock',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'kernel',",(0,t.jsx)(n.br,{}),"\n","'string',",(0,t.jsx)(n.br,{}),"\n","'register',",(0,t.jsx)(n.br,{}),"\n","'collection']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h3,{id:"insert",children:(0,t.jsx)(n.code,{children:".insert()"})}),"\n",(0,t.jsx)(n.p,{children:"Let's sort the list back in alphabetical order and insert a word in there where it belongs. Let's choose the word 'lambda'."}),"\n",(0,t.jsx)(n.p,{children:"First sort the list again."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.sort(key=str.lower)\n\nhardware_software_words\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["['binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'bus',",(0,t.jsx)(n.br,{}),"\n","'cache',",(0,t.jsx)(n.br,{}),"\n","'clock',",(0,t.jsx)(n.br,{}),"\n","'collection',",(0,t.jsx)(n.br,{}),"\n","'kernel',",(0,t.jsx)(n.br,{}),"\n","'RAM',",(0,t.jsx)(n.br,{}),"\n","'register',",(0,t.jsx)(n.br,{}),"\n","'set',",(0,t.jsx)(n.br,{}),"\n","'string']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"That sorted the list in alphabetical order. Now we insert a word."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.insert(8, 'lambda')\n\nhardware_software_words\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["['binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'bus',",(0,t.jsx)(n.br,{}),"\n","'cache',",(0,t.jsx)(n.br,{}),"\n","'clock',",(0,t.jsx)(n.br,{}),"\n","'collection',",(0,t.jsx)(n.br,{}),"\n","'kernel',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'RAM',",(0,t.jsx)(n.br,{}),"\n","'register',",(0,t.jsx)(n.br,{}),"\n","'set',",(0,t.jsx)(n.br,{}),"\n","'string']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h3,{id:"index",children:(0,t.jsx)(n.code,{children:".index()"})}),"\n",(0,t.jsx)(n.p,{children:"I inserted that to its place by looking at the list with my eyes."}),"\n",(0,t.jsx)(n.p,{children:"I usually don't want to do this type of thing. I want the computer to find and use the index."}),"\n",(0,t.jsx)(n.p,{children:"Let's use another list method to find the index of the word that starts with 'k', 'kernel', and add 'lambda' after it."}),"\n",(0,t.jsxs)(n.p,{children:["We can find a word that ",(0,t.jsx)(n.code,{children:".startswith('k')"})," with a loop that we'll learn in a future lesson. So we're still doing this manually a little bit right now until we learn loops."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.index('kernel')\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"7"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"Add 'lambda' in the list. Notice below we find the index where 'kernel' is and add 1 to it. We want to add 'lambda' at the location after 'kernel'."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"idx = hardware_software_words.index('kernel') + 1\n\nhardware_software_words.insert(idx, 'lambda')\n\nhardware_software_words\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["['binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'bus',",(0,t.jsx)(n.br,{}),"\n","'cache',",(0,t.jsx)(n.br,{}),"\n","'clock',",(0,t.jsx)(n.br,{}),"\n","'collection',",(0,t.jsx)(n.br,{}),"\n","'kernel',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'RAM',",(0,t.jsx)(n.br,{}),"\n","'register',",(0,t.jsx)(n.br,{}),"\n","'set',",(0,t.jsx)(n.br,{}),"\n","'string']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h3,{id:"reverse",children:(0,t.jsx)(n.code,{children:".reverse()"})}),"\n",(0,t.jsx)(n.p,{children:"We can reverse the order of the list. Notice it sorted in regular expected alphabetical order. 'RAM' is in with 'register' where it should be."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.reverse()\n\nhardware_software_words\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["['string',",(0,t.jsx)(n.br,{}),"\n","'set',",(0,t.jsx)(n.br,{}),"\n","'register',",(0,t.jsx)(n.br,{}),"\n","'RAM',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'kernel',",(0,t.jsx)(n.br,{}),"\n","'collection',",(0,t.jsx)(n.br,{}),"\n","'clock',",(0,t.jsx)(n.br,{}),"\n","'cache',",(0,t.jsx)(n.br,{}),"\n","'bus',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:["We can also use ",(0,t.jsx)(n.code,{children:".sort()"})," to reverse the list. Note we need to use these two ",(0,t.jsx)(n.code,{children:"keyword arguments"}),", ",(0,t.jsx)(n.code,{children:"key"})," and ",(0,t.jsx)(n.code,{children:"reverse"}),". If we don't include ",(0,t.jsx)(n.code,{children:"key=str.lower"})," here, it'll put 'RAM' at the end."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.sort(key=str.lower, reverse=True)\n\nhardware_software_words\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["['string',",(0,t.jsx)(n.br,{}),"\n","'set',",(0,t.jsx)(n.br,{}),"\n","'register',",(0,t.jsx)(n.br,{}),"\n","'RAM',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'kernel',",(0,t.jsx)(n.br,{}),"\n","'collection',",(0,t.jsx)(n.br,{}),"\n","'clock',",(0,t.jsx)(n.br,{}),"\n","'cache',",(0,t.jsx)(n.br,{}),"\n","'bus',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h3,{id:"remove",children:(0,t.jsx)(n.code,{children:".remove()"})}),"\n",(0,t.jsx)(n.p,{children:"Now we have two functions left that both remove things from the list."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:".remove()"})," will remove something by name."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'hardware_software_words.remove("clock")\n\nhardware_software_words\n'})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["['string',",(0,t.jsx)(n.br,{}),"\n","'set',",(0,t.jsx)(n.br,{}),"\n","'register',",(0,t.jsx)(n.br,{}),"\n","'RAM',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'kernel',",(0,t.jsx)(n.br,{}),"\n","'collection',",(0,t.jsx)(n.br,{}),"\n","'cache',",(0,t.jsx)(n.br,{}),"\n","'bus',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"What happens if we remove one of the words that appears more than once? It removes the first one it sees, and then it's done."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'hardware_software_words.remove("binary")\n\nhardware_software_words\n'})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["['string',",(0,t.jsx)(n.br,{}),"\n","'set',",(0,t.jsx)(n.br,{}),"\n","'register',",(0,t.jsx)(n.br,{}),"\n","'RAM',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'kernel',",(0,t.jsx)(n.br,{}),"\n","'collection',",(0,t.jsx)(n.br,{}),"\n","'cache',",(0,t.jsx)(n.br,{}),"\n","'bus',",(0,t.jsx)(n.br,{}),"\n","'binary',",(0,t.jsx)(n.br,{}),"\n","'binary']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h3,{id:"pop",children:(0,t.jsx)(n.code,{children:".pop()"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:".pop()"}),' will "pop" or remove the last item in the list.']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.pop()\n\nhardware_software_words\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["['string',",(0,t.jsx)(n.br,{}),"\n","'set',",(0,t.jsx)(n.br,{}),"\n","'register',",(0,t.jsx)(n.br,{}),"\n","'RAM',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'kernel',",(0,t.jsx)(n.br,{}),"\n","'collection',",(0,t.jsx)(n.br,{}),"\n","'cache',",(0,t.jsx)(n.br,{}),"\n","'bus',",(0,t.jsx)(n.br,{}),"\n","'binary']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"It will also take an index! Let's remove the first item in the list, which is at index 0."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"hardware_software_words.pop(0)\n\nhardware_software_words\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["['set',",(0,t.jsx)(n.br,{}),"\n","'register',",(0,t.jsx)(n.br,{}),"\n","'RAM',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'lambda',",(0,t.jsx)(n.br,{}),"\n","'kernel',",(0,t.jsx)(n.br,{}),"\n","'collection',",(0,t.jsx)(n.br,{}),"\n","'cache',",(0,t.jsx)(n.br,{}),"\n","'bus',",(0,t.jsx)(n.br,{}),"\n","'binary']"]})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(n.p,{children:["In conclusion, we went over a lot of methods that come from the list class. You can add, remove, and sort lists now. The ",(0,t.jsx)(n.a,{href:"/docs/python/foundations/lists-and-strings/",children:"lists and strings lesson"})," went over how to access things in a list."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);