"use strict";(self.webpackChunklearn_coding_fun_projects=self.webpackChunklearn_coding_fun_projects||[]).push([[7440],{4698:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"python/foundations/projects/story-project-v2","title":"story-project-v2","description":"Silly Story Project with Python for Absolute Beginners","source":"@site/docs/python/01-foundations/projects/story-project-v2.md","sourceDirName":"python/01-foundations/projects","slug":"/python/foundations/projects/story-project-v2","permalink":"/docs/python/foundations/projects/story-project-v2","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"python","permalink":"/docs/tags/python"},{"inline":true,"label":"project","permalink":"/docs/tags/project"},{"inline":true,"label":"silly stories","permalink":"/docs/tags/silly-stories"},{"inline":true,"label":"foundations","permalink":"/docs/tags/foundations"},{"inline":true,"label":"lists","permalink":"/docs/tags/lists"}],"version":"current","lastUpdatedAt":1751342400000,"sidebarPosition":4,"frontMatter":{"sidebar_label":"story project v2","sidebar_position":4,"last_update":{"date":"7/01/25","author":"krblackwell"},"description":"Silly Story Project with Python for Absolute Beginners","tags":["python","project","silly stories","foundations","lists"],"draft":false,"unlisted":false,"hide_table_of_contents":true},"sidebar":"pythonSidebar","previous":{"title":"compliment generator v1","permalink":"/docs/python/foundations/projects/compliment-generator-v1"},"next":{"title":"story project v3","permalink":"/docs/python/foundations/projects/story-project-v3"}}');var t=s(4848),o=s(8453);const r={sidebar_label:"story project v2",sidebar_position:4,last_update:{date:"7/01/25",author:"krblackwell"},description:"Silly Story Project with Python for Absolute Beginners",tags:["python","project","silly stories","foundations","lists"],draft:!1,unlisted:!1,hide_table_of_contents:!0},i="Story Project v2",l={},c=[{value:"What is a Silly Story?",id:"what-is-a-silly-story",level:2},{value:"Let&#39;s start with the full story",id:"lets-start-with-the-full-story",level:2},{value:"Random",id:"random",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("a",{href:"/lite/lab/index.html?path=python/01-foundations/projects/story-project-v2.ipynb",target:"_blank",children:(0,t.jsx)("img",{src:"https://jupyterlite.rtfd.io/en/latest/_static/badge.svg",alt:"Open in the Lab!"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/",children:"Go back to Home"})," - ",(0,t.jsx)(n.a,{href:"/docs/python/foundations/projects/story-project-v2",children:"Go to lesson page"})," - ",(0,t.jsx)(n.a,{href:"/docs/python/foundations",children:"Go to Foundations section"})]}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"story-project-v2",children:"Story Project v2"})}),"\n",(0,t.jsxs)(n.p,{children:['We created a "Silly Story" in ',(0,t.jsx)(n.a,{href:"/docs/python/foundations/projects/story-project-v1",children:"Story Project v1"}),", and we're going to expand on that with lists."]}),"\n",(0,t.jsx)(n.h2,{id:"what-is-a-silly-story",children:"What is a Silly Story?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"(exclamation)"}),"! Well, if ",(0,t.jsx)(n.strong,{children:"(person)"})," has never heard of a ",(0,t.jsx)(n.strong,{children:"(adjective)"})," Story, that's a shame!"]}),"\n",(0,t.jsx)(n.p,{children:"A Silly Story is a sentence that has some words taken out, and a friend fills them in (no peeking!)."}),"\n",(0,t.jsx)(n.h2,{id:"lets-start-with-the-full-story",children:"Let's start with the full story"}),"\n",(0,t.jsx)(n.p,{children:"Here is the story we used before."}),"\n",(0,t.jsx)(n.p,{children:'Pip is an axolotl who lives in a beautiful lake. Every day, Pip wakes up with a yawn, and eats his breakfast of waffles. He goes to the market. As he passes his turtle friends, they exclaim, "What a beautiful day!"'}),"\n",(0,t.jsx)(n.p,{children:"The next cell contains the story with variables inserted, so you can add words in"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"name = 'Fifi'\ntype_of_animal = 'dog'\nadjective1 = 'fizzy'\nnoun1 = 'nose'\nnoun2 = 'crinkle paper'\nnoun3 = 'cactus'\nplace = 'Timbuktu'\ntype_of_animal2 = 'gopher'\nexclamation = \"Whoa\"\n\nprint(f\"\"\"\n{name} is a/an {type_of_animal} who lives in a {adjective1} lake. Every day,\n{name} wakes up with a/an {noun2}, and eats his breakfast of {noun3}.\nHe goes to the {place}.\nAs he passes his {type_of_animal2} friends, they exclaim, \"{exclamation}!\"\n\"\"\")\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["Fifi is a/an dog who lives in a fizzy lake. Every day,",(0,t.jsx)(n.br,{}),"\n","Fifi wakes up with a/an crinkle paper, and eats his breakfast of cactus.",(0,t.jsx)(n.br,{}),"\n","He goes to the Timbuktu.",(0,t.jsx)(n.br,{}),"\n",'As he passes his gopher friends, they exclaim, "Whoa!"']})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"Now that we know lists, we can do something here to create a new story each time we run the cell!"}),"\n",(0,t.jsx)(n.p,{children:"We can create a list of names, for example."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"names = ['Fifi', 'James', 'Sam', 'Opal', 'Jackson', 'Lakshmi', 'Chloe']\n\nnames\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"['Fifi', 'James', 'Sam', 'Opal', 'Jackson', 'Lakshmi', 'Chloe']"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h2,{id:"random",children:"Random"}),"\n",(0,t.jsxs)(n.p,{children:["Something interesting we can do here is randomly pick from this list. But how do we do that? With the ",(0,t.jsx)(n.code,{children:"random"})," library. This is one that you'll have to use ",(0,t.jsx)(n.code,{children:"import"})," to bring in to your program."]}),"\n",(0,t.jsxs)(n.p,{children:["You'll see I also set ",(0,t.jsx)(n.code,{children:"random.seed(5)"}),". This is so when I run this notebook through tests, I get the same result every time. I only want a test to fail if something has changed about the functionality of a package or piece of code."]}),"\n",(0,t.jsx)(n.p,{children:"If a test fails because of something being randomly generated, and that's how it works! I don't want it to fail because it's working."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import random\n\nrandom.seed(5)  # gives me the same result for a first run through\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Run the below cell a couple of times. You should see the value of ",(0,t.jsx)(n.code,{children:"random_choice"})," change."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"random_choice = random.randint(0, len(names) - 1)\n\nrandom_choice\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"4"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:["You should only see numbers ranging from 0 to 6. The first index of the list ",(0,t.jsx)(n.code,{children:"name"})," is 0 and the last one is 6. If we randomly generate the index, we can get a new name each time."]}),"\n",(0,t.jsx)(n.p,{children:"We'll create some lists below, and give them plural names."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"names = ['Fifi', 'Cookie', 'Steve', 'Sean', 'Barry', 'James', 'Sam',\n         'Opal', 'Jackson', 'Lakshmi', 'Chloe', 'Regan', 'Phoebe']\ntypes_of_animals = ['dog', 'cat', 'snake', 'parrot', 'budgie',\n                    'bunny', 'sugar bear', 'hermit crab']\nadjectives = ['fizzy', 'stinky', 'flat', 'long', 'hairy', 'shimmery']\nnouns = ['nose', 'yawn', 'waffles', 'cat food', 'funyuns', 'phone',\n         'journal', 'bowling ball', 'tree', 'pumpkin', 'ceramic art']\nplaces = ['city of Timbuktu', 'forge', 'internet', 'backyard',\n          'mountain', 'volcano', 'kitchen']\nexclamations = [\"Whoa\", 'Hooray', 'Huzzah', 'Yippee', 'Oh no', 'What',\n                \"For Pete's Sake\", 'How']\n"})}),"\n",(0,t.jsx)(n.p,{children:"Next, we'll get a random value for each placeholder."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Rerun me #1\n\nrandom_name = random.randint(0, len(names) - 1)\nrandom_animal1 = random.randint(0, len(types_of_animals) - 1)\nrandom_animal2 = random.randint(0, len(types_of_animals) - 1)\nrandom_adjective1 = random.randint(0, len(adjectives) - 1)\nrandom_noun1 = random.randint(0, len(nouns) - 1)\nrandom_noun2 = random.randint(0, len(nouns) - 1)\nrandom_noun3 = random.randint(0, len(nouns) - 1)\nrandom_place = random.randint(0, len(places) - 1)\nrandom_exclamation = random.randint(0, len(exclamations) - 1)\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)(n.p,{children:"Rerun the cell above to get different numbers."}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"random.seed()"})," makes sure I get the same numbers each time."]}),(0,t.jsx)(n.p,{children:'Run the above cell, "Rerun me #1" then rerun "Rerun me #2" and "Rerun me #3" below.'}),(0,t.jsx)(n.p,{children:"Rerun the lists if you change them!"})]}),"\n",(0,t.jsxs)(n.p,{children:["Now you can see each of these is a number that goes from 0 (first element in the list) to ",(0,t.jsx)(n.code,{children:"len(list) - 1"}),", which is the length of the list. We minus 1 because lists start a 0."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"len(names)\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"13"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"len(names) - 1\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"12"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"Here is one way to get the last item of a list."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"names[len(names) - 1]\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"'Phoebe'"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"And -1 is also how we can get the last item."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"names[-1]\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"'Phoebe'"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"Here are two examples of the random numbers we got."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"random_name\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"4"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"random_place\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"1"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"We apply the random numbers to each list, so we get a random item each time."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"name = names[random_name]\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"exclamations[random_exclamation]\n"})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsx)(n.p,{children:"'Hooray'"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Rerun me #2\n\nname = names[random_name]\ntype_of_animal = types_of_animals[random_animal1]\nadjective1 = adjectives[random_adjective1]\nnoun1 = nouns[random_noun1]\nnoun2 = nouns[random_noun2]\nnoun3 = nouns[random_noun3]\nplace = places[random_place]\ntype_of_animal2 = types_of_animals[random_animal2]\nexclamation = exclamations[random_exclamation]\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Rerun me #3\n\nprint(f"""\n{name} is a/an {type_of_animal} who lives in a {adjective1} lake. Every day,\n{name} wakes up with a/an {noun2}, and eats his breakfast of {noun3}.\nHe goes to the {place}.\nAs he passes his {type_of_animal2} friends, they exclaim, "{exclamation}!"\n""")\n'})}),"\n",(0,t.jsx)("div",{class:"output-cell",children:(0,t.jsxs)(n.p,{children:["Barry is a/an bunny who lives in a long lake. Every day,",(0,t.jsx)(n.br,{}),"\n","Barry wakes up with a/an ceramic art, and eats his breakfast of nose.",(0,t.jsx)(n.br,{}),"\n","He goes to the forge.",(0,t.jsx)(n.br,{}),"\n",'As he passes his dog friends, they exclaim, "Hooray!"']})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"Try making your own silly story, or fill in one with a friend! Add to the lists or fill them in with your own words."}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)("a",{href:"/lite/lab/index.html",children:"Open a new blank notebook in the Lab"}),' to test if you can remember how to do this on your own! To open a new notebook from the link, click on the tile that says "Py" or "Python."']})}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(n.p,{children:["We were able to take our silly story and add lists in to the mix. We learned how to use ",(0,t.jsx)(n.code,{children:"import random"})," to get random values from the lists to make our story more interesting."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>i});var a=s(6540);const t={},o=a.createContext(t);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);